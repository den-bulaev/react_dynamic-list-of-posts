{"version":3,"sources":["types.js","components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","api/posts.js","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["TypePost","PropTypes","shape","id","number","isRequired","userId","title","string","body","createdAt","updatedAt","PostsList","React","memo","posts","setId","selectedPostId","setLoading","className","map","key","type","onClick","propTypes","arrayOf","func","defaultProps","request","endpoint","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPostComments","postId","comments","filter","comment","removeComment","commentId","method","addComment","add","NewCommentForm","setComments","useState","name","setName","email","setEmail","setBody","handleSubmit","event","a","preventDefault","JSON","stringify","headers","setData","fieldName","target","fieldValue","value","onSubmit","placeholder","onChange","required","Loader","PostDetails","isLoading","post","setPost","commentsVisibility","setCommentsVisibility","useEffect","getPostDetails","handleClick","length","date","userName","time","Date","toLocaleTimeString","dateString","toLocaleDateString","printCommentDetails","UserSelect","setSelectedUserId","setPosts","setSelectedPostId","selectedUserId","getUserPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58833616.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TypePost = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  updatedAt: PropTypes.string.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypePost } from '../../types';\n\nimport './PostsList.scss';\nimport '../pressed-button.scss';\n\nexport const PostsList = React.memo(\n  ({ posts, setId, selectedPostId, setLoading }) => (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts !== null && (\n          posts.map(({ id, title, userId }) => (\n            <li className=\"PostsList__item\" key={id}>\n              <div>\n                <b>\n                  [\n                  {`User #${userId}`}\n                  ]:\n                  {' '}\n                </b>\n                {title}\n              </div>\n\n              {selectedPostId === id ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button pressed-button\"\n                  onClick={() => setId(0)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setId(id);\n                    setLoading(true);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  ),\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(TypePost),\n  setId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setLoading: PropTypes.func.isRequired,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (endpoint, options) => (\n  fetch(BASE_URL + endpoint, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    }).then(result => result.data));\n\nexport const remove = (endpoint) => {\n  const method = { method: 'DELETE' };\n\n  return request(endpoint, method);\n};\n\nexport const add = (endpoint, options) => request(endpoint, options);\n","import { request, remove, add } from './api';\n\nexport const getPostComments = (postId) => {\n  if (!postId || typeof (postId) !== 'number') {\n    return 0;\n  }\n\n  const result = request('/comments')\n    .then(comments => comments.filter(comment => comment.postId === postId));\n\n  return result;\n};\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n\nexport const addComment = options => add('/comments', options);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostComments, addComment } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = React.memo(\n  ({ postId, setComments }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [body, setBody] = useState('');\n\n    const handleSubmit = async(event) => {\n      event.preventDefault();\n\n      const options = {\n        method: 'POST',\n        body: JSON.stringify({\n          name,\n          email,\n          body,\n          postId,\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      };\n\n      await addComment(options);\n      await getPostComments(postId)\n        .then(result => setComments(result));\n\n      setName('');\n      setEmail('');\n      setBody('');\n    };\n\n    const setData = (event) => {\n      const fieldName = event.target.name;\n      const fieldValue = event.target.value;\n\n      switch (fieldName) {\n        case 'name':\n          setName(fieldValue);\n          break;\n\n        case 'email':\n          setEmail(fieldValue);\n          break;\n\n        case 'body':\n          setBody(fieldValue);\n          break;\n\n        default: throw new Error(\n          `NewCommentForm, line 35, unexpected input name - ${fieldName}`,\n        );\n      }\n    };\n\n    return (\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            value={name}\n            onChange={setData}\n            required\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            value={email}\n            onChange={setData}\n            required\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={body}\n            onChange={setData}\n            required\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n    );\n  },\n);\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = React.memo(\n  () => (\n    <div className=\"Loader\">\n      <div className=\"Loader__content\" />\n    </div>\n  ),\n);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { Loader } from '../Loader';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = React.memo(\n  ({ postId, isLoading, setLoading }) => {\n    const [post, setPost] = useState({});\n    const [comments, setComments] = useState([]);\n    const [commentsVisibility, setCommentsVisibility] = useState(true);\n\n    useEffect(() => {\n      getPostDetails(postId)\n        .then(result => setPost(result));\n\n      getPostComments(postId)\n        .then((result) => {\n          setComments(result);\n          setLoading(false);\n        });\n    }, [postId]);\n\n    const changeCommentsVisibility = () => {\n      setCommentsVisibility(!commentsVisibility);\n    };\n\n    const handleClick = async(event) => {\n      await removeComment(event.target.value);\n\n      getPostComments(postId)\n        .then(result => setComments(result));\n    };\n\n    const printCommentDetails = (date, userName) => {\n      const time = new Date(date).toLocaleTimeString();\n      const dateString = new Date(date).toLocaleDateString();\n\n      return `${dateString} at ${time} | ${userName} says: `;\n    };\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.body}</p>\n        </section>\n\n        {!isLoading ? (\n          <section className=\"PostDetails__comments\">\n            {comments.length > 0 ? (\n              <>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={changeCommentsVisibility}\n                >\n                  {commentsVisibility\n                  /* eslint-disable-next-line max-len */\n                    ? `Hide ${comments.length} comment${comments.length === 1 ? '' : 's'}`\n                  /* eslint-disable-next-line max-len */\n                    : `Show ${comments.length} comment${comments.length === 1 ? '' : 's'}`}\n                </button>\n\n                <ul className=\"PostDetails__list\">\n                  {comments.map(\n                    ({ id, body, createdAt, name }) => commentsVisibility && (\n                    <li className=\"PostDetails__list-item\" key={id}>\n                      <div className=\"PostDetails__comment-description\">\n                        <button\n                          type=\"button\"\n                          value={id}\n                          className=\"PostDetails__remove-button button\"\n                          onClick={handleClick}\n                        >\n                          X\n                        </button>\n\n                        <pre>\n                          {printCommentDetails(createdAt, name)}\n                        </pre>\n                      </div>\n\n                      <p>\n                        {`${body}`}\n                      </p>\n                    </li>\n                    ),\n                  )}\n                </ul>\n              </>\n            ) : (\n              <div className=\"PostDetails__no-comments\">\n                There are no comments yet\n              </div>\n            )}\n          </section>\n        ) : <Loader />}\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm postId={postId} setComments={setComments} />\n          </div>\n        </section>\n      </div>\n    );\n  },\n);\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setLoading: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId, setPosts) => {\n  if (!userId) {\n    request(`/posts`)\n      .then(result => setPosts(result));\n  } else {\n    request(`/posts?userId=${userId}`)\n      .then(result => setPosts(result));\n  }\n};\n\nexport const getPostDetails = (postId) => {\n  if (!postId) {\n    return 0;\n  }\n\n  return request(`/posts/${postId}`);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const UserSelect = React.memo(\n  ({ setSelectedUserId }) => {\n    const handleChange = (event) => {\n      setSelectedUserId(event.target.value);\n    };\n\n    return (\n      <label>\n        Select a user: &nbsp;\n\n        <select\n          className=\"App__user-selector\"\n          onChange={handleChange}\n        >\n          <option value=\"0\">All users</option>\n          <option value=\"1\">Leanne Graham</option>\n          <option value=\"2\">Ervin Howell</option>\n          <option value=\"3\">Clementine Bauch</option>\n          <option value=\"4\">Patricia Lebsack</option>\n          <option value=\"5\">Chelsey Dietrich</option>\n          <option value=\"6\">Mrs. Dennis Schulist</option>\n          <option value=\"7\">Kurtis Weissnat</option>\n          <option value=\"8\">Nicholas Runolfsdottir V</option>\n          <option value=\"9\">Glenna Reichert</option>\n          <option value=\"10\">Galina Lozinska</option>\n        </select>\n      </label>\n    );\n  },\n);\n\nUserSelect.propTypes = {\n  setSelectedUserId: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getUserPosts(+selectedUserId, setPosts);\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          setSelectedUserId={setSelectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n            setLoading={setLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails\n              postId={selectedPostId}\n              isLoading={isLoading}\n              setLoading={setLoading}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default React.memo(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}