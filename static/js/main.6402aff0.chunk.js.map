{"version":3,"sources":["components/PostsList/PostsList.jsx","types.js","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","api/posts.js","components/PostDetails/PostDetails.jsx","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["PostsList","PropTypes","shape","id","number","isRequired","userId","title","string","body","createdAt","updatedAt","posts","setId","selectedPostId","className","map","key","type","onClick","defaultProps","request","endpoint","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPostComments","postId","comments","filter","comment","removeComment","commentId","method","addComment","add","NewCommentForm","setComments","useState","name","setName","email","setEmail","setBody","handleSubmit","event","a","preventDefault","JSON","stringify","headers","setData","fieldName","target","fieldValue","value","onSubmit","placeholder","onChange","required","getUserPosts","post","PostDetails","setPost","commentsVisibility","setCommentsVisibility","useEffect","getPostDetails","handleClick","length","date","userName","time","Date","toLocaleTimeString","dateString","toLocaleDateString","printCommentDetails","UserSelect","setSelectedUserId","getPosts","App","setPosts","setSelectedPostId","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6402aff0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypePost } from '../../types';\n\nimport './PostsList.scss';\nimport '../pressed-button.scss';\n\nexport const PostsList = ({ posts, setId, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts !== null && (\n        posts.map(({ id, title, userId }) => (\n          <li className=\"PostsList__item\" key={id}>\n            <div>\n              <b>\n                [\n                {`User #${userId}`}\n                ]:\n                {' '}\n              </b>\n              {title}\n            </div>\n\n            {selectedPostId === id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button pressed-button\"\n                onClick={() => setId(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setId(id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))\n      )}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(TypePost),\n  setId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n","import PropTypes from 'prop-types';\n\nexport const TypePost = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  updatedAt: PropTypes.string.isRequired,\n});\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (endpoint, options) => (\n  fetch(BASE_URL + endpoint, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    }).then(result => result.data));\n\nexport const remove = (endpoint) => {\n  const method = { method: 'DELETE' };\n\n  return request(endpoint, method);\n};\n\nexport const add = (endpoint, options) => request(endpoint, options);\n","import { request, remove, add } from './api';\n\nexport const getPostComments = (postId) => {\n  if (!postId || typeof (postId) !== 'number') {\n    return 0;\n  }\n\n  return request('/comments')\n    .then(comments => comments.filter(comment => comment.postId === postId));\n};\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n\nexport const addComment = options => add('/comments', options);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostComments, addComment } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        body,\n        postId,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    };\n\n    await addComment(options);\n    await getPostComments(postId)\n      .then(result => setComments(result));\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const setData = (event) => {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n\n    switch (fieldName) {\n      case 'name':\n        setName(fieldValue);\n        break;\n\n      case 'email':\n        setEmail(fieldValue);\n        break;\n\n      case 'body':\n        setBody(fieldValue);\n        break;\n\n      default: throw new Error(\n        `NewCommentForm, line 35, unexpected input name - ${fieldName}`,\n      );\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={setData}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={setData}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={setData}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = (posts, userId) => {\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = (postId) => {\n  if (!postId) {\n    return 0;\n  }\n\n  return request(`/posts/${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removeComment } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [commentsVisibility, setCommentsVisibility] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(result => setPost(result));\n\n    getPostComments(postId)\n      .then(result => setComments(result));\n  }, [postId]);\n\n  const changeCommentsVisibility = () => {\n    setCommentsVisibility(!commentsVisibility);\n  };\n\n  const handleClick = async(event) => {\n    await removeComment(event.target.value);\n\n    getPostComments(postId)\n      .then(result => setComments(result));\n  };\n\n  const printCommentDetails = (date, userName) => {\n    const time = new Date(date).toLocaleTimeString();\n    const dateString = new Date(date).toLocaleDateString();\n\n    return `${dateString} at ${time} | ${userName} says: `;\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={changeCommentsVisibility}\n            >\n              {commentsVisibility\n                /* eslint-disable-next-line max-len */\n                ? `Hide ${comments.length} comment${comments.length === 1 ? '' : 's'}`\n                /* eslint-disable-next-line max-len */\n                : `Show ${comments.length} comment${comments.length === 1 ? '' : 's'}`}\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {comments.map(\n                ({ id, body, createdAt, name }) => commentsVisibility && (\n                  <li className=\"PostDetails__list-item\" key={id}>\n                    <div className=\"PostDetails__comment-description\">\n                      <button\n                        type=\"button\"\n                        value={id}\n                        className=\"PostDetails__remove-button button\"\n                        onClick={handleClick}\n                      >\n                        X\n                      </button>\n\n                      <pre>\n                        {printCommentDetails(createdAt, name)}\n                      </pre>\n                    </div>\n\n                    <p>\n                      {`${body}`}\n                    </p>\n                  </li>\n                ),\n              )}\n            </ul>\n          </>\n        ) : (\n          <div className=\"PostDetails__no-comments\">\n            There are no comments yet\n          </div>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} setComments={setComments} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const UserSelect = ({ setSelectedUserId, getPosts }) => {\n  const handleChange = (event) => {\n    getPosts();\n    setSelectedUserId(event.target.value);\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        onChange={handleChange}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Galina Lozinska</option>\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  setSelectedUserId: PropTypes.func.isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nimport { request } from './api/api';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const getPosts = () => {\n    request('/posts')\n      .then(result => setPosts(result));\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          setSelectedUserId={setSelectedUserId}\n          getPosts={getPosts}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={getUserPosts(posts, +selectedUserId)}\n            setId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}